    .data

# Define 2 vectors
a: .word  5,  6,  7,  8,  9
b: .word 10, 20, 30, 40, 50
# Define loop limits
counter: .word 0
limit:   .word 5

    .text # We want to compute a = b + c

# Main invocation point
main:
    lw $s0, counter       # Initialise loop counter
    lw $s1, limit         # Initialise limit
    addi $s2, $zero, a    # Load address of a into s2
    addi $s3, $zero, b    # Load address of b into s3
    addi $v0, $zero, 0    # Initialise return value to 0
    j loop

# Loop label designed to iterate over vectors
loop:
    bne $s0, $s1, 2       # If counter != limit then go forward 2 instructions
    j end                 # Otherwise go to the end of the program
    lw $a0, $s2           # Load value at a location into a0
    lw $a1, $s3           # Load value at b location into a1

    addi $sp, $sp, -4     # Allocate space on stack
    sw $v0, $sp           # Store v0 on stack
    jal multiply          # Call multiply
    lw $t0, $sp           # Retrieve value placed on stack.
    addi $sp, $sp, 4      # Deallocate space on stack.
    add $v0, $v0, $t0     # Add add v0 to original v0 value

    addi $s0, $s0, 1      # Add 1 to counter
    addi $s2, $s2, 4      # Add word to a
    addi $s3, $s3, 4      # Add word to b

    j loop                # Go back to the loop label


# Multiply label for multiplying integers
multiply:
    mult $a0, $a1         # Multiply a0 and a1
    mflo $v0              # Store result in v0
    jr $ra                # Return


# Exit point
end:
    sll $zero, $zero, 0   # Final nop
